#!/bin/sh
# prerm script for perfsonar-psconfig-publisher
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <prerm> `remove'
#        * <old-prerm> `upgrade' <new-version>
#        * <new-prerm> `failed-upgrade' <old-version>
#        * <conflictor's-prerm> `remove' `in-favour' <package> <new-version>
#        * <deconfigured's-prerm> `deconfigure' `in-favour'
#          <package-being-installed> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    remove|deconfigure)
	# Clean up pipline for logstash
	TMPPIPELINE=$(mktemp)
	grep -v -x -F -f /etc/perfsonar/microdep/logstash/microdep-pipelines.yml /etc/logstash/pipelines.yml > $TMPPIPELINE && mv $TMPPIPELINE /etc/logstash/pipelines.yml
	# Clean up db access
	if [ -f /var/lib/pgsql/data/pg_hba.conf ]; then
	    /usr/lib/perfsonar/bin/microdep_commands/fix-pgsql-access.sh -ri /var/lib/pgsql/data/pg_hba.conf
	fi
	# Stop services (ignore failures)
	systemctl stop perfsonar-microdep-gap-ana.service || true
	systemctl stop perfsonar-microdep-trace-ana.service || true
	systemctl stop perfsonar-microdep-restart.timer || true
	systemctl stop perfsonar-microdep-watchconfig.path || true
    ;;

    upgrade)
    ;;

    failed-upgrade)
    ;;

    *)
        echo "prerm called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
