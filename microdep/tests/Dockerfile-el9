
# Dockerfile to build perfSONAR  node
# To build, cd to folder and run
#
#     docker build --build-arg TYPE=<node-variant> -t perfsonar-<node-variant> ."
#
# where <node-variant> may be "testpoint" og "toolkit" 
#
# To run container with systemd operative in none-priviledge mode (may not work...)  
#   docker run -d --tmpfs /tmp --tmpfs /run -v /sys/fs/cgroup:/sys/fs/cgroup:ro --net=host --name perfsonar-testpoint --rm perfsonar-testpoint
#   docker run -d --tmpfs /tmp --tmpfs /run -v /sys/fs/cgroup:/sys/fs/cgroup:ro --net=host --name perfsonar-toolkit --rm perfsonar-toolkit
#
# ... or in privilede-mode
#   docker run -d --privileged --net=host --name perfsonar-testpoint --rm perfsonar-testpoint
#   docker run -d --privileged --net=host --name perfsonar-toolkit --rm perfsonar-toolkit
#
#


FROM systemd-image-el9:latest
LABEL org.opencontainers.image.authors="Otto J Wittner <wittner@sikt.no>"

# Fix default locals
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US.UTF-8
ENV LC_COLLATE=C
ENV LC_CTYPE=en_US.UTF-8

# ---- D o w n l o a d   a n d   i n s t a l l   p a c k a g e s  ------

# Install the EPEL RPM
RUN dnf install -y epel-release && dnf config-manager --set-enabled crb

# Point installation at the perfSONAR el9 main repository
RUN dnf install -y http://software.internet2.edu/rpms/el9/x86_64/latest/packages/perfsonar-repo-0.11-1.noarch.rpm
# Point to perfsonar beta
#RUN dnf install -y http://software.internet2.edu/rpms/el9/x86_64/latest/packages/perfsonar-repo-staging-0.11-1.noarch.rpm
# Point to nightly builds
#RUN dnf install -y https://software.internet2.edu/rpms/el9/x86_64/latest/packages/perfsonar-repo-nightly-minor-0.11-1.noarch.rpm

# Clean cache and update 
RUN dnf clean all && rm -rf /var/cache/dnf/* && dnf -y update

# Install management packages
RUN dnf install -y --allowerasing coreutils man-db nano emacs git patch openssh-clients net-tools iputils traceroute tcpdump curl bind-utils unzip gnupg

# Fiks tcpdump issue for priveledge mode
RUN mv /usr/sbin/tcpdump /usr/bin/tcpdump
RUN ln -s /usr/bin/tcpdump /usr/sbin/tcpdump

# Install and explicitly init postgres before installing perfsonar packages
#
# Based on a Dockerfile at
# https://raw.githubusercontent.com/zokeber/docker-postgresql/master/Dockerfile
# and
# https://raw.githubusercontent.com/perfsonar/perfsonar-testpoint-docker/master/systemd/Dockerfile
RUN useradd -l -r -h /var/lib/pgsql postgres
RUN dnf install -y postgresql-server
# Set the environment variables
ENV PGDATA=/var/lib/pgsql/data
# Initialize the database
RUN su - postgres -c "/usr/bin/pg_ctl init"
# Change own user
RUN chown -R postgres:postgres /var/lib/pgsql/data/*
#Start postgresql and install perfSONAR
ARG TYPE
RUN mkdir -p /var/run/postgresql && chown postgres.postgres /var/run/postgresql \
    && su - postgres -c "/usr/bin/pg_ctl -D /var/lib/pgsql/data start -w -t 120" \
    && dnf install -y perfsonar-$TYPE

# Clean up 
#RUN dnf clean all && rm -rf /var/cache/dnf/* && dnf -y update


# Add Opensearch dashboards ("Kibana")
#RUN if [ "$TYPE" = "toolkit" ]; then \
#       dnf -y install opensearch-dashboards && systemctl enable opensearch-dashboards.service ; \
#    fi


# Install perfsonar tracetree (from nightly build)
##RUN if [ "$TYPE" = "toolkit" ]; then \
##    dnf -y install perfsonar-tracetree; \
##fi
# Prepare access to extra and local repos
RUN dnf -y install centos-release-rabbitmq-38 yum-utils rpm-sign createrepo nano
##COPY microdep/tests/pgp /root/pgp
COPY unibuild-repo/RPMS/*.rpm /var/lib/unibuild-repo/RPMS
COPY pstracetree/unibuild-repo/RPMS/*.rpm /var/lib/unibuild-repo/RPMS
RUN createrepo /var/lib/unibuild-repo
RUN yum-config-manager --add-repo file:///var/lib/unibuild-repo
##RUN gpg --import /root/pgp/pgp-key.private
##RUN echo -e "%_signature gpg\n%_gpg_name $(gpg --list-signatures | grep "sig 3" | awk '{print $3}')"  > /root/.rpmmacros
##RUN rpm --addsign /var/lib/unibuild-repo/RPMS/*.rpm 
##RUN gpg --detach-sign --armor /var/lib/unibuild-repo/repodata/repomd.xml
##RUN yum-config-manager --add-repo /root/pgp/unibuild.repo
##RUN dnf -y update
RUN dnf -y update --nogpgcheck

# Install microdep (needs postgres running)
#RUN if [ "$TYPE" = "toolkit" ]; then \
#    mkdir -p /var/run/postgresql && chown postgres.postgres /var/run/postgresql \
#    && su - postgres -c "/usr/bin/pg_ctl -D /var/lib/pgsql/data start -w -t 120" \
#    && dnf -y install --nogpgcheck perfsonar-microdep; \
#fi

# Add Microdep packages (need postgres running)
# Install from repo
#RUN if [ "$TYPE" = "toolkit" ]; then \
#    dnf -y install centos-release-rabbitmq-38 && dnf -y update; \
#    mkdir -p /var/run/postgresql && chown postgres.postgres /var/run/postgresql \
#    && su - postgres -c "/usr/bin/pg_ctl -D /var/lib/pgsql/data start -w -t 120" \
#    dnf -y install perfsonar-microdep perfsonar-tracetree
#fi
# Install for local folder
#COPY unibuild-repo/RPMS/ /root/RPMS/
#COPY submodules/pstracetree/unibuild-repo/RPMS/ /root/RPMS/
#RUN if [ "$TYPE" = "toolkit" ]; then \
#    dnf -y install centos-release-rabbitmq-38 && dnf -y update; \
#    mkdir -p /var/run/postgresql && chown postgres.postgres /var/run/postgresql \
#    && su - postgres -c "/usr/bin/pg_ctl -D /var/lib/pgsql/data start -w -t 120" \
#    && dnf -y install --allowerasing --skip-broken /root/RPMS/*; \
#fi

#RUN pip3 install multidict typing_extensions yarl async_timeout idna_ssl aiosignal cchardet charset_normalizer attrs
#RUN pip3 install geoip2

# ----  E n d   d o w n l o a d s   a n d   p a c k a g e   i n s t a l l   ----

# POSTGRES
# Reconfigure prefsonar Postgres DB (start db server first)
RUN mkdir -p /var/run/postgresql && chown postgres.postgres /var/run/postgresql \
    && su - postgres -c "/usr/bin/pg_ctl -D /var/lib/pgsql/data start -w -t 120" \
    && /usr/libexec/pscheduler/internals/db-update \
    && /usr/libexec/pscheduler/internals/db-change-password

# Rsyslog
# Note: need to modify default rsyslog configuration to work with Docker, 
# as described here: http://www.projectatomic.io/blog/2014/09/running-syslog-within-a-docker-container/
# (relevant for Centos7, but also for almalinux 9?)
#COPY microdep-dev/perfsonar-testpoint-docker/rsyslog/rsyslog.conf /etc/rsyslog.conf
#COPY microdep-dev/perfsonar-testpoint-docker/rsyslog/listen.conf /etc/rsyslog.d/listen.conf
#COPY microdep-dev/perfsonar-testpoint-docker/rsyslog/python-pscheduler.conf /etc/rsyslog.d/python-pscheduler.conf
#COPY microdep-dev/perfsonar-testpoint-docker/rsyslog/owamp-syslog.conf /etc/rsyslog.d/owamp-syslog.conf

# Make ntdp stay root and stop attempting to update system clock
#RUN sed -i 's|-u ntp:ntp ||g' /usr/lib/systemd/system/ntpd.service
#RUN echo "disable kernel" >> /etc/ntp.conf

# Make pscheduler services more tolerant to restart failures
RUN sed -i 's|Restart=always|Restart=always\nStartLimitBurst=1000\nStartLimitIntervalSec=30|g' /usr/lib/systemd/system/pscheduler-archiver.service
RUN sed -i 's|Restart=always|Restart=always\nStartLimitBurst=1000\nStartLimitIntervalSec=30|g' /usr/lib/systemd/system/pscheduler-runner.service
RUN sed -i 's|Restart=always|Restart=always\nStartLimitBurst=1000\nStartLimitIntervalSec=30|g' /usr/lib/systemd/system/pscheduler-scheduler.service
RUN sed -i 's|Restart=always|Restart=always\nStartLimitBurst=1000\nStartLimitIntervalSec=30|g' /usr/lib/systemd/system/pscheduler-ticker.service

# Reduce range for owamp and twamp test-ports (to more easy enable docker port mapping)
RUN sed -i 's|testports 8760-9960|testports 8760-8800|g' /etc/owamp-server/owamp-server.conf
RUN sed -i 's|testports 18760-19960|testports 18760-18800|g' /etc/twamp-server/twamp-server.conf

# Add lookup service configs 
COPY microdep/tests/etc/lsregistrationdaemon.conf*  /etc/perfsonar/

# Add service to apply host specific config
#COPY etc/hostspecific-conf.service /usr/lib/systemd/system/
#RUN systemctl enable hostspecific-conf.service

RUN if [ "$TYPE" = "toolkit" ]; then \
# Fix JNA and temp-file issue with Opensearch and Logstash,
       sed -i 's|${OPENSEARCH_TMPDIR}|/var/log/opensearch|g' /etc/opensearch/jvm.options; \
       sed -i 's|#-Djava.io.tmpdir=$HOME|-Djava.io.tmpdir=/var/log/logstash|g' /etc/logstash/jvm.options; \
# Go easy on java heap size
       sed -i 's|-Xms7g|-Xms2g|g' /etc/opensearch/jvm.options; \
       sed -i 's|-Xmx7g|-Xms4g|g' /etc/opensearch/jvm.options; \
# Increase startup timeout and add auto restart for Opensearch
       sed -i 's|TimeoutStartSec=75|TimeoutStartSec=600\nRestart=on-failure\nRestartSec=10s|g' /usr/lib/systemd/system/opensearch.service; \
# Increase startup timeout and add auto restart for Grafana
       sed -i 's|Restart=on-failure|TimeoutStartSec=600\nRestart=on-failure\nRestartSec=10s|g' /usr/lib/systemd/system/grafana-server.service; \
# Fix template error for Logstash
#       cp /usr/share/logstash/vendor/bundle/jruby/2.5.0/gems/logstash-output-opensearch-1.2.0-java/lib/logstash/outputs/opensearch/templates/ecs-disabled/1x.json /usr/share/logstash/vendor/bundle/jruby/2.5.0/gems/logstash-output-opensearch-1.2.0-java/lib/logstash/outputs/opensearch/templates/ecs-disabled/2x.json; \
# Fix SSL problems with proxy towards Opensearch
#       cp /etc/opensearch/node.pem /etc/opensearch/both.pem; \
#       sed 's|PRI|RSA PRI|g' /etc/opensearch/node-key.pem >> /etc/opensearch/both.pem; \
#       sed -i 's|ProxyPass|    SSLProxyVerify none\n    SSLProxyCheckPeerCN off\n    SSLProxyCheckPeerName off\n    SSLProxyCheckPeerExpire off\n    SSLProxyMachineCertificateFile /etc/opensearch/both.pem\n    ProxyPass|' /etc/httpd/conf.d/apache-opensearch.conf; \
# Fix access to local resources when external port mapping alters urls
       sed -i 's|Listen 443 https|Listen 443 https\nListen 4435 https\nListen 4436 https|' /etc/httpd/conf.d/ssl.conf; \
       sed -i 's|_default_:443|_default_:443 _default_:4435 _default_:4436|' /etc/httpd/conf.d/ssl.conf; \
       sed -i 's|Listen 80|Listen 80\nListen 8085\nListen 8086|' /etc/httpd/conf/httpd.conf; \
       sed -i 's|\*:80|\*:80 \*:8085 \*:8086|' /etc/httpd/conf.d/apache-toolkit_web_gui.conf; \
       dnf -y install httpd-tools && htpasswd -c -b /etc/perfsonar/toolkit/psadmin.htpasswd admin notadminnono ; \
# Fix host address, username and password for Opensearch dashboard ("Kibana")
#       sed -i 's/# server.host: "localhost"/server.host: "0.0.0.0"/' /etc/opensearch-dashboards/opensearch_dashboards.yml; \
#       USER=`awk -F " " '{print $1}' /etc/perfsonar/opensearch/opensearch_login` && sed -i "s|opensearch.username: kibanaserver|opensearch.username: $USER|g" /etc/opensearch-dashboards/opensearch_dashboards.yml; \
#       PASSWD=`awk -F " " '{print $2}' /etc/perfsonar/opensearch/opensearch_login` && sed -i "s|opensearch.password: kibanaserver|opensearch.password: $PASSWD|g" /etc/opensearch-dashboards/opensearch_dashboards.yml; \
fi

# Add service to run (re)run password setup for opensearch
COPY microdep/tests/opensearch-security-admin.service /usr/lib/systemd/system/
RUN if [ "$TYPE" = "toolkit" ]; then \
     systemctl enable opensearch-security-admin.service; \
fi

#
#  M i c r o d e p - i n - p e r f s o n a r   a d d i t i o n s
#

# Update topology db with info from psconfig test description
#RUN if [ "$TYPE" = "tootlkit" ]; then \
#       /usr/lib/perfsonar/bin/microdep_commands/microdep-psconfig-load.pl --db /etc/perfsonar/microdep/mp-dragonlab/etc/microdep.db /etc/perfsonar/psconfig/pscheduler.d/microdep-tests.json; \
#    fi
       
# Add subsession support for powstream (assuming powstream is compiled with patch from branch "subsession-owp")
#COPY microdep/tests/powstream /usr/bin/powstream
#COPY microdep/tests/pscheduler-latencybg-subcount.patch-with-runtime-paths /usr/libexec/pscheduler
#RUN cd /usr/libexec/pscheduler && patch -up1 < pscheduler-latencybg-subcount.patch-with-runtime-paths

# Publish psconfig file for microdep tests
RUN if [ "$TYPE" = "tootlkit" ]; then \
       dnf install -y perfsonar-psconfig-publisher; \
       psconfig publish --pretty /etc/perfsonar/psconfig/pscheduler.d/microdep-tests.json; \
    fi

# http web (use 443 instead!)
EXPOSE 80  
# https web
EXPOSE 443
# Opensearch (use https://<hostname>:443/opensearch/ instead)
#EXPOSE 9200
# Opensearch Dashboard   
EXPOSE 5601
# Grafana   
EXPOSE 3000   

# Run systemd as in "parent"-image
CMD ["/lib/systemd/systemd"]
